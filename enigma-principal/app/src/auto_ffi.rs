/* automatically generated by rust-bindgen */

#![allow(dead_code)]
use enigma_types::*;
use sgx_types::*;

extern "C" {
    pub fn ecall_get_registration_quote(
        eid: sgx_enclave_id_t, retval: *mut sgx_status_t, target_info: *const sgx_target_info_t, report: *mut sgx_report_t,
    ) -> sgx_status_t;
}
extern "C" {
    pub fn ecall_run_tests(eid: sgx_enclave_id_t) -> sgx_status_t;
}
extern "C" {
    pub fn ecall_get_signing_address(eid: sgx_enclave_id_t, arr: *mut [u8; 20usize]) -> sgx_status_t;
}
extern "C" {
    pub fn ecall_set_worker_params(
        eid: sgx_enclave_id_t, retval: *mut EnclaveReturn, worker_params_rlp: *const u8, worker_params_rlp_len: usize,
        seed_in: *mut [u8; 32usize], nonce_in: *mut [u8; 32usize], rand_out: *mut [u8; 32usize], nonce_out: *mut [u8; 32usize],
        sig_out: *mut [u8; 65usize],
    ) -> sgx_status_t;
}
extern "C" {
    pub fn ecall_get_enc_state_keys(
        eid: sgx_enclave_id_t, retval: *mut EnclaveReturn, msg: *const u8, msg_len: usize, addrs: *const ContractAddress,
        addrs_len: usize, sig: *mut [u8; 65usize], serialized_ptr: *mut u64, sig_out: *mut [u8; 65usize],
    ) -> sgx_status_t;
}
